openapi: 3.0.3
info:
  title: Checkout API-first Service
  version: 0.1.0
  description: API for carts, checkout, and orders.

servers:
  - url: http://localhost:8080

tags:
  - name: Carts
  - name: Checkout
  - name: Orders

paths:
  /carts:
    post:
      tags: [Carts]
      summary: Create a new cart
      operationId: createCart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCartJob'
      responses:
        '200':
          description: Cart created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCartResult'

  /carts/{id}/items:
    post:
      tags: [Carts]
      summary: Add an item to a cart
      operationId: addItemToCart
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
          description: Cart identifier
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCartItemJob'
      responses:
        '200':
          description: Updated cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCartResult'
        '404':
          description: Cart not found

  /carts/{id}:
    get:
      tags: [Carts]
      summary: Get a cart by id
      operationId: getCart
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
          description: Cart identifier
      responses:
        '200':
          description: Cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCartResult'
        '404':
          description: Cart not found

  /checkouts:
    post:
      tags: [Checkout]
      summary: Start checkout
      operationId: startCheckout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutJob'
      responses:
        '201':
          description: Checkout started, order created
          headers:
            Location:
              description: URL of the created/updated order resource
              schema: { type: string, format: uri }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutResult'
        '400':
          description: Invalid request
        '404':
          description: Cart not found

  /orders/{id}:
    get:
      tags: [Orders]
      summary: Get an order by id
      operationId: getOrder
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
          description: Order identifier
      responses:
        '200':
          description: Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrderResult'
        '404':
          description: Order not found

components:
  schemas:
    # ---- Requests (Jobs) ----
    CreateCartJob:
      type: object
      properties:
        currency:
          type: string
          example: USD
      required: [currency]

    AddCartItemJob:
      type: object
      properties:
        productId: { type: string, example: "sku-123" }
        qty: { type: integer, format: int32, minimum: 1, example: 2 }
        unitPrice: { type: number, format: double, minimum: 0, example: 10.0 }
      required: [productId, qty, unitPrice]

    CheckoutJob:
      type: object
      properties:
        cartId: { type: string, example: "c_123" }
        currency: { type: string, example: USD, nullable: true }
        couponCode: { type: string, example: WELCOME10, nullable: true }
        paymentProvider:
          type: string
          description: MockPay | FailPay | CashOnDelivery | COD
          example: MockPay
      required: [cartId]

    # ---- Responses (Results) ----
    CreateCartResult:
      type: object
      properties:
        cartId:
          type: string
          example: c_123
          readOnly: true
      required: [cartId]

    CartItemResult:
      type: object
      properties:
        productId: { type: string, example: "sku-123" }
        qty: { type: integer, format: int32, example: 2 }
        unitPrice: { type: number, format: double, example: 10.0 }
        lineTotal:
          type: number
          format: double
          example: 20.0
          readOnly: true
      required: [productId, qty, unitPrice, lineTotal]

    GetCartResult:
      type: object
      properties:
        id:
          type: string
          example: c_123
          readOnly: true
        currency: { type: string, example: USD }
        items:
          type: array
          items: { $ref: '#/components/schemas/CartItemResult' }
      required: [id, currency, items]

    CheckoutResult:
      type: object
      properties:
        orderId:
          type: string
          example: o_1001
          readOnly: true
        state:
          type: string
          enum: [AwaitingPayment, Paid, Failed]
          example: Paid
        total:
          type: number
          format: double
          example: 18.0
        provider:
          type: string
          example: MockPay
      required: [orderId, state, total, provider]

    GetOrderResult:
      type: object
      properties:
        id:
          type: string
          example: o_1001
          readOnly: true
        amount:
          type: number
          format: double
          example: 18.0
        currency:
          type: string
          example: USD
        state:
          type: string
          enum: [AwaitingPayment, Paid, Failed]
          example: Paid
      required: [id, amount, currency, state]
